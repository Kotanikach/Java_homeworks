/**
 * Практика #4: Результаты выполнения кода и объяснение
 *
 * @author Ivan
 */
public class Main {
    public static void main(String[] args) {
        int i1 = 128;
        Integer a1 = i1;
        Integer b1 = i1;
        System.out.println("a1==i1 " + (a1 == i1));  // true
        System.out.println("b1==i1 " + (b1 == i1));  // true
        System.out.println("a1==b1 " + (a1 == b1));  // false
        System.out.println("a1.equals(i1) -> " + a1.equals(i1));  // true
        System.out.println("b1.equals(i1) -> " + b1.equals(i1));  // true
        System.out.println("a1.equals(b1) -> " + a1.equals(b1));  // true

        int i2 = 127;
        Integer a2 = i2;
        Integer b2 = i2;
        System.out.println("a2==i2 " + (a2 == i2));  // true
        System.out.println("b2==i2 " + (b2 == i2));  // true
        System.out.println("a2==b2 " + (a2 == b2));  // true
        System.out.println("a2.equals(i2) -> " + a2.equals(i2));  // true
        System.out.println("b2.equals(i2) -> " + b2.equals(i2));  // true
        System.out.println("a2.equals(b2) -> " + a2.equals(b2));  // true
    }
}

Объяснение результатов
1. Примеры с i1 = 128
Integer a1 = i1; и Integer b1 = i1;: Здесь происходит автоматическая упаковка значения типа int в объект типа Integer. Поскольку значение 128 выходит за пределы кэша целых чисел, который по умолчанию хранит значения от -128 до 127, для каждого вызова создается новый объект.
a1 == i1 и b1 == i1: Оператор == сравнивает значение объекта Integer с примитивным типом int. В этом случае происходит неявное преобразование, и сравниваются значения, поэтому результат будет true.
a1 == b1: Здесь сравниваются два объекта типа Integer. Поскольку оба объекта были созданы отдельно (из-за значения 128), они не ссылаются на один и тот же объект в памяти, поэтому результат будет false.
2. Примеры с i2 = 127
Для значений от -128 до 127 Java использует кэш объектов типа Integer. Поэтому при упаковке значения 127 оба переменные (a2 и b2) ссылаются на один и тот же объект в памяти.
Все сравнения для переменных с использованием оператора == возвращают true, так как оба объекта ссылаются на один и тот же экземпляр.

Класс IntegerCache
Класс IntegerCache используется для оптимизации работы с объектами типа Integer. Он кэширует экземпляры объектов для значений от -128 до 127.
Таким образом, когда вы создаете объект типа Integer с значением в этом диапазоне, Java возвращает уже существующий объект из кэша вместо создания нового. Это объясняет, почему сравнение объектов для значений от -128 до 127 возвращает true при использовании оператора ==.
